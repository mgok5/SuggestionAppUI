@page "/AdminApproval"
@inject ISuggestionData suggestionData
@inject IUserData userData
@inject NavigationManager navManager


<h1>Pending Submissions</h1>

<div>
    <div>@submissions?.Count Submissions</div>
    <div>
        <button @onclick= "ClosePage"></button>
    </div>
</div>

@if (submissions is not null)
{
    foreach (var s in submissions)
    {
        <div>
            <div>
                <button @onclick= "(() => ApproveSubmission(s))">Approve</button>
                <button @onclick="(() => RejectSubmission(s))">Reject</button>
            </div>
            <div>
                <!--here we check whether we editing item or not..-->
                @if (currentEditingTitle == s.Id)
                {
                    <!--here it saves id with SaveTitle method and dont let it be changed-->
                    <EditForm Model="@editedTitle" OnSubmit="(() => SaveTitle(s))"> 

                    </EditForm>
                }
            </div>
        </div>
    }
}


@code {
    private List<SuggestionModel> submissions;
    private SuggestionModel editingModel;
    private string currentEditingTitle = "";
    private string editedTitle = "";
    private string currentEditingDescription = "";
    private string editedDescription = "";

    protected async override Task OnInitializedAsync()
    {
        submissions = await suggestionData.GetAllSuggestionsWaitingForApproval();
    }

    private async Task ApproveSubmission(SuggestionModel submission)
    {
        submission.ApprovedForRelease = true;
        submissions.Remove(submission);
        await suggestionData.UpdateSuggestions(submission);
    }

    private async Task RejectSubmission(SuggestionModel submission)
    {
        submission.Rejected = true;
        submissions.Remove(submission);
        await suggestionData.UpdateSuggestions(submission);
    }

    private void EditTitle(SuggestionModel model)
    {
        editingModel = model;
        editedTitle = model.Suggestion;
        currentEditingTitle = model.Id;
        currentEditingDescription = "";
    }

    private async Task SaveTitle(SuggestionModel model)
    {
        currentEditingTitle = string.Empty;
        model.Suggestion = editedTitle;
        await suggestionData.UpdateSuggestions(model);
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }
}
