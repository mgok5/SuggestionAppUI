@page "/Create"
@using SuggestionAppUI.Components
@inject ICategoryData categoryData
@inject ISuggestionData suggestionData
@inject IUserData userData
@inject NavigationManager navManager


<div>
    <div>
        <div>
            <button @onclick= "ClosePage"></button>
        </div>
        @if (categories is not null)
        {
            
        }

        <EditForm Model="suggestion" OnValidSubmit="CreateSuggestion">
            <DataAnnotationsValidator/>   <!--Checks for our required sections if it is validated then shows submit-->
            <ValidationSummary/>
            <div>
                <label for="suggestion-text">Suggestion</label>
                <div>Focus on the topic or technology you want to learn about.</div>
                <InputText id="suggestion-text" @bind-Value="suggestion.Suggestion"/>
            </div>

            <div>
                <label for="category">Category</label>
                <div>Choose one category.</div>
                <div>
                    <MyInputRadioGroup id="category" @bind-Value="suggestion.CategoryId">
                        @foreach(var c in categories)
                        {
                            <div>
                                <InputRadio Value="@c.Id" id="@c.Id"/>
                                <label for="@c.Id">@c.CategoryName - @c.CategoryDescription</label>
                            </div>
                        }
                    </MyInputRadioGroup>
                </div>
            </div>

            <div>
                <label for="description">Description</label>
                <div>Briefly describe your suggestion.</div>
                <InputTextArea id="description" @bind-Value="suggestion.Description" />
            </div>

            <div>
                <button type="submit">Suggest</button>
            </div>
        </EditForm>


    </div>
</div>


@code {
    private CreateSuggestionModel suggestion = new();
    //we create createsuggestionmodel separately in our UI because we use ui specific code in it like maxlength and required sections. 
    // we dont want our library and ui model to know anything about each other.
    private List<CategoryModel> categories;
    private UserModel loggedInUser;

    protected async override Task OnInitializedAsync()
    {
        categories = await categoryData.GetAllCategories();

        //TODO - Replace with user lookup
        loggedInUser = await userData.GetUserFromAuthentication("abc-345");

    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    private async Task CreateSuggestion()
    {
        SuggestionModel s = new();  //that is why we do manual mapping here.
        s.Suggestion = suggestion.Suggestion;
        s.Description = suggestion.Description;             //suggestion is the suggestion model from CreateSuggestionModel in UI
        s.Author = new BasicUserModel(loggedInUser);
        //below matches the one we selected
        s.Category = categories.Where(c => c.Id == suggestion.CategoryId).FirstOrDefault();

        if (s.Category is null)
        {
            suggestion.CategoryId = "";
            return;
        }

        await suggestionData.CreateSuggestion(s);
        suggestion = new();
        ClosePage();
    }

}
